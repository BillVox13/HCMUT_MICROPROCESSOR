;
; CHIP1_MASTER.asm
;
;This file was made by VO THIEN NHAN-2151025 on 11/10/2023
;

.ORG 0x0000
rjmp reset_handler
.org 0x0002
rjmp IRQ_ISR
.org INT_VECTORS_SIZE
KEYCODE_LCD:
	.db "RECENT KEYCODE:",0 ; string of LCD terminated with value 0
reset_handler:
	CALL SPI_Init; init SPI for slave
	call USART_Init; USART init for sending to virtual terminal
	call LCD_Init
;setup IRQ external interrupt (INT0) 
	LDI R16, (1<<PD2)
	OUT PORTD,R16 ; set PD2 (INT0) input
	LDI R16, (1 << ISC01) ;
	STS EICRA,R16 ; falling edge of  INT0
	LDI R16, (1 << INT0) 
	OUT EIMSK, R16 ; enable isr for INT0
	sei
start:
    rjmp start

;--------------------------------INT0 INTERRUPT--------------------------------;
IRQ_ISR:
CALL SPI_Transmit_Master ; receive data is stored in R24;
; however, to print number to LCD and Virtual Terminal , we need to convert R24 into ASCII
CALL ASCII_CONVERT; convert data in R24 to ascii
CALL USART_SendChar; send data in R24 via USART
LDI R16,0
LDI R17,0
call LCD_Move_Cursor 
ldi ZH, high(KEYCODE_LCD) ; point to the information that is to be displayed
ldi ZL, low(KEYCODE_LCD)
CALL LCD_Send_String
MOV R16,R24;
CALL LCD_Send_Data; send data stored in R16
RETI

;--------------------------------ASCII SUBROUTINES--------------------------------;
ASCII_CONVERT:
PUSH R20
CPI R24,10
BRLO SENDDATA
SUBI R24,-7; advance A=>F by + 7 since A (65 in ascii) is 7 digits far from 9 (58 in ascii)
SENDDATA: 
SUBI R24,-48; convert to ascii by R24 += 0x30
POP R20
RET

;--------------------------------USART SUBROUTINES--------------------------------;
USART_Init:
 ; Set baud rate to 9600 bps with 8 MHz clock
	ldi r16, 103
	sts UBRR0L, r16
;set double speed
	ldi r16, (1 << U2X0)
	sts UCSR0A, r16
;Set frame format: 8 data bits, no parity, 1 stop bit
	ldi r16, (1 << UCSZ01) | (1 << UCSZ00)
	sts UCSR0C, r16
;Enable transmitter and receiver
	ldi r16, (1 << RXEN0) | (1 << TXEN0)
	sts UCSR0B, r16
	ret

USART_SendChar: ;send out 1 byte in r24
	push r17
;Wait for the transmitter to be ready
USART_SendChar_Wait:
	lds r17, UCSR0A
	sbrs r17, UDRE0 ;check USART Data Register Empty bit
	rjmp USART_SendChar_Wait
	sts UDR0, r24 ;send out
	pop r17
	ret
;--------------------------------SPI SUBROUTINES--------------------------------;
.equ	IRQ = 3
.equ	SS = 4
.equ	MOSI = 5		;for ATmega324PA
.equ	MISO = 6
.equ	SCK = 7
SPI_Init:
	push r17
	LDI 	R17,(1<<MOSI)|(1<<SCK)|(1 << SS)
	OUT 	DDRB,R17	;MOSI, SS and SCK output, MISO and input MISO
	LDI		R17,(1<<MISO)|(1 <<IRQ)|(1 << SS)
	OUT		PORTB,R17; enable pull up res for input MISO and IRQ, initialize SS = 1
	LDI 	R17,(1<<SPE0)|(1 << MSTR0)|(1 << SPR00); enable SPI
	OUT 	SPCR0,R17	;slave, CLK = fck/16	
	pop r17
	ret

SPI_Transmit_Master: ; data stored in R24 is transmitted
	push r20
	CBI		PORTB,4; enable SS device
	NOP
	NOP
	NOP
	NOP
	OUT     SPDR0,R20; send dummy data
WAIT1:
	IN		R20,SPSR0
	SBRS 	R20,SPIF0	;wait for transmission
	RJMP 	WAIT1
	IN      R24,SPDR0; read transmmited data into R24
	SBI		PORTB,4; disable SS device


	pop r20
	RET

;--------------------------------LCD SUBROUTINES--------------------------------;

 //////////////////////////////////////////// Subroutine to send command to LCD///////////////////////////////////////////////////
;Command code in r16
;LCD_D7..LCD_D4 connect to PA7..PA4
;LCD_RS connect to PA0
;LCD_RW connect to PA1
;LCD_EN connect to PA2
LCD_Send_Command:
	push r17
	call LCD_wait_busy ; check if LCD is busy 
	mov r17,r16 ;save the command
	; Set RS low to select command register
	; Set RW low to write to LCD
	andi r17,0xF0
	; Send command to LCD
	out LCDPORT, r17 
	nop
	nop
	; Pulse enable pin
	sbi LCDPORT, LCD_EN
	nop
	nop
	cbi LCDPORT, LCD_EN
	swap r16
	andi r16,0xF0
	; Send command to LCD
	out LCDPORT, r16 
	; Pulse enable pin
	sbi LCDPORT, LCD_EN
	nop
	nop
	cbi LCDPORT, LCD_EN
	pop r17
	ret


 //////////////////////////////////////////// Subroutine to send data to LCD///////////////////////////////////////////////////
LCD_Send_Data:
	push r17
	call LCD_wait_busy ;check if LCD is busy
	mov r17,r16 ;save the command
	; Set RS high to select data register
	; Set RW low to write to LCD
	andi r17,0xF0
	ori r17,0x01
	; Send data to LCD
	out LCDPORT, r17 
	nop
	; Pulse enable pin
	sbi LCDPORT, LCD_EN
	nop
	cbi LCDPORT, LCD_EN
	; Delay for command execution
		;send the lower nibble
		nop
		swap r16
		andi r16,0xF0
		; Set RS high to select data register
	; Set RW low to write to LCD
	andi r16,0xF0
	ori r16,0x01
	; Send command to LCD
	out LCDPORT, r16
		nop
	; Pulse enable pin
	sbi LCDPORT, LCD_EN
	nop
	cbi LCDPORT, LCD_EN
		pop r17
	ret


 //////////////////////////////////////////// Subroutine to check busy flag ///////////////////////////////////////////////////
LCD_wait_busy:
	push r16
	ldi r16, 0b00000111 ; set PA7-PA4 as input, PA2-PA0 as output
	out LCDPORTDIR, r16
	ldi r16,0b11110010 ; set RS=0, RW=1 for read the busy flag
	out LCDPORT, r16
	nop
LCD_wait_busy_loop:
	sbi LCDPORT, LCD_EN
	nop
	nop
	in r16, LCDPORTPIN
	cbi LCDPORT, LCD_EN
	nop
	sbi LCDPORT, LCD_EN
	nop
	nop
	cbi LCDPORT, LCD_EN
	nop
	andi r16,0x80
	cpi r16,0x80
	breq LCD_wait_busy_loop
	ldi r16, 0b11110111 ; set PA7-PA4 as output, PA2-PA0 as output
	out LCDPORTDIR, r16
	ldi r16,0b00000000 ; set RS=0, RW=1 for read the busy flag
	out LCDPORT, r16
	pop r16
	ret


; Subroutine to send string to LCD
;address of the string on ZH-ZL
;string end with Null
.def LCDData = r16
LCD_Send_String:
 push ZH ; preserve pointer registers
 push ZL
push LCDData
; fix up the pointers for use with the 'lpm' instruction
 lsl ZL ; shift the pointer one bit left for the lpm instruction
 rol ZH
; write the string of characters
LCD_Send_String_01:
 lpm LCDData, Z+ ; get a character
 cpi LCDData, 0 ; check for end of string
 breq LCD_Send_String_02 ; done
; arrive here if this is a valid character
 call LCD_Send_Data ; display the character
 rjmp LCD_Send_String_01 ; not done, send another character
; arrive here when all characters in the message have been sent to the LCD module
LCD_Send_String_02:
pop LCDData
 pop ZL ; restore pointer registers
 pop ZH
 ret

 ; Function to move the cursor to a specific position on the LCD
; Assumes that the LCD is already initialized
; Input: Row number in R16 (0-based), Column number in R17 (0-based)
LCD_Move_Cursor:
 cpi r16,0 ;check if first row
brne LCD_Move_Cursor_Second
andi r17, 0x0F
ori r17,0x80 
mov r16,r17
 ; Send command to LCD
 call LCD_Send_Command
ret
LCD_Move_Cursor_Second:
cpi r16,1 ;check if second row
brne LCD_Move_Cursor_Exit ;else exit 
andi r17, 0x0F
ori r17,0xC0 
mov r16,r17 
 ; Send command to LCD
 call LCD_Send_Command
 LCD_Move_Cursor_Exit:
 ; Return from function
ret

; Replace with your application code
;init the LCD
;LCD_D7..LCD_D4 connect to PA7..PA4
;LCD_RS connect to PA0
;LCD_RW connect to PA1
;LCD_EN connect to PA2
	.equ LCDPORT = PORTA ; Set signal port reg to PORTA
	.equ LCDPORTDIR = DDRA ; Set signal port dir reg to PORTA
	.equ LCDPORTPIN = PINA ; Set clear signal port pin reg to PORTA
	.equ LCD_RS = PINA0
	.equ LCD_RW = PINA1
	.equ LCD_EN = PINA2
	.equ LCD_D7 = PINA7
	.equ LCD_D6 = PINA6
	.equ LCD_D5 = PINA5
	.equ LCD_D4 = PINA4
LCD_Init:
 ; Set up data direction register for Port A
	ldi r16, 0b11110111 ; set PA7-PA4 as outputs, PA2-PA0 as output
	out LCDPORTDIR, r16
 ; Wait for LCD to power up
	call DELAY_10MS
	call DELAY_10MS
 ; Send initialization sequence
	ldi r16, 0x02 ; Function Set: 4-bit interface
	call LCD_Send_Command
	ldi r16, 0x28 ; Function Set: enable 5x7 mode for chars 
	call LCD_Send_Command
	ldi r16, 0x0E ; Display Control: Display OFF, Cursor ON
	call LCD_Send_Command
	ldi r16, 0x01 ; Clear Display
	call LCD_Send_Command
	ldi r16, 0x80 ; Clear Display
	call LCD_Send_Command
	ret

DELAY_10MS:
PUSH R20
PUSH R21
LDI R21,80 ;1MC
L1: LDI R20,250 ;1MC
L2: DEC R20 ;1MC
NOP ;1MC
BRNE L2 ;2/1MC
DEC R21 ;1MC
BRNE L1 ;2/1MC
POP R21
POP R20
 RET ;4MC
